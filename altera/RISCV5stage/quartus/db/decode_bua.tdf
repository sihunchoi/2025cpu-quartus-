--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=16 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:03:37:SJ cbx_lpm_add_sub 2020:11:11:17:03:37:SJ cbx_lpm_compare 2020:11:11:17:03:37:SJ cbx_lpm_decode 2020:11:11:17:03:37:SJ cbx_mgl 2020:11:11:17:50:46:SJ cbx_nadder 2020:11:11:17:03:37:SJ cbx_stratix 2020:11:11:17:03:37:SJ cbx_stratixii 2020:11:11:17:03:37:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_bua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[15..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[15..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode8341w[1..0]	: WIRE;
	w_anode8350w[3..0]	: WIRE;
	w_anode8367w[3..0]	: WIRE;
	w_anode8377w[3..0]	: WIRE;
	w_anode8387w[3..0]	: WIRE;
	w_anode8397w[3..0]	: WIRE;
	w_anode8407w[3..0]	: WIRE;
	w_anode8417w[3..0]	: WIRE;
	w_anode8427w[3..0]	: WIRE;
	w_anode8439w[1..0]	: WIRE;
	w_anode8446w[3..0]	: WIRE;
	w_anode8457w[3..0]	: WIRE;
	w_anode8467w[3..0]	: WIRE;
	w_anode8477w[3..0]	: WIRE;
	w_anode8487w[3..0]	: WIRE;
	w_anode8497w[3..0]	: WIRE;
	w_anode8507w[3..0]	: WIRE;
	w_anode8517w[3..0]	: WIRE;
	w_data8339w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[15..0] = eq_wire[15..0];
	eq_wire[] = ( ( w_anode8517w[3..3], w_anode8507w[3..3], w_anode8497w[3..3], w_anode8487w[3..3], w_anode8477w[3..3], w_anode8467w[3..3], w_anode8457w[3..3], w_anode8446w[3..3]), ( w_anode8427w[3..3], w_anode8417w[3..3], w_anode8407w[3..3], w_anode8397w[3..3], w_anode8387w[3..3], w_anode8377w[3..3], w_anode8367w[3..3], w_anode8350w[3..3]));
	w_anode8341w[] = ( (w_anode8341w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode8350w[] = ( (w_anode8350w[2..2] & (! w_data8339w[2..2])), (w_anode8350w[1..1] & (! w_data8339w[1..1])), (w_anode8350w[0..0] & (! w_data8339w[0..0])), w_anode8341w[1..1]);
	w_anode8367w[] = ( (w_anode8367w[2..2] & (! w_data8339w[2..2])), (w_anode8367w[1..1] & (! w_data8339w[1..1])), (w_anode8367w[0..0] & w_data8339w[0..0]), w_anode8341w[1..1]);
	w_anode8377w[] = ( (w_anode8377w[2..2] & (! w_data8339w[2..2])), (w_anode8377w[1..1] & w_data8339w[1..1]), (w_anode8377w[0..0] & (! w_data8339w[0..0])), w_anode8341w[1..1]);
	w_anode8387w[] = ( (w_anode8387w[2..2] & (! w_data8339w[2..2])), (w_anode8387w[1..1] & w_data8339w[1..1]), (w_anode8387w[0..0] & w_data8339w[0..0]), w_anode8341w[1..1]);
	w_anode8397w[] = ( (w_anode8397w[2..2] & w_data8339w[2..2]), (w_anode8397w[1..1] & (! w_data8339w[1..1])), (w_anode8397w[0..0] & (! w_data8339w[0..0])), w_anode8341w[1..1]);
	w_anode8407w[] = ( (w_anode8407w[2..2] & w_data8339w[2..2]), (w_anode8407w[1..1] & (! w_data8339w[1..1])), (w_anode8407w[0..0] & w_data8339w[0..0]), w_anode8341w[1..1]);
	w_anode8417w[] = ( (w_anode8417w[2..2] & w_data8339w[2..2]), (w_anode8417w[1..1] & w_data8339w[1..1]), (w_anode8417w[0..0] & (! w_data8339w[0..0])), w_anode8341w[1..1]);
	w_anode8427w[] = ( (w_anode8427w[2..2] & w_data8339w[2..2]), (w_anode8427w[1..1] & w_data8339w[1..1]), (w_anode8427w[0..0] & w_data8339w[0..0]), w_anode8341w[1..1]);
	w_anode8439w[] = ( (w_anode8439w[0..0] & data_wire[3..3]), enable_wire);
	w_anode8446w[] = ( (w_anode8446w[2..2] & (! w_data8339w[2..2])), (w_anode8446w[1..1] & (! w_data8339w[1..1])), (w_anode8446w[0..0] & (! w_data8339w[0..0])), w_anode8439w[1..1]);
	w_anode8457w[] = ( (w_anode8457w[2..2] & (! w_data8339w[2..2])), (w_anode8457w[1..1] & (! w_data8339w[1..1])), (w_anode8457w[0..0] & w_data8339w[0..0]), w_anode8439w[1..1]);
	w_anode8467w[] = ( (w_anode8467w[2..2] & (! w_data8339w[2..2])), (w_anode8467w[1..1] & w_data8339w[1..1]), (w_anode8467w[0..0] & (! w_data8339w[0..0])), w_anode8439w[1..1]);
	w_anode8477w[] = ( (w_anode8477w[2..2] & (! w_data8339w[2..2])), (w_anode8477w[1..1] & w_data8339w[1..1]), (w_anode8477w[0..0] & w_data8339w[0..0]), w_anode8439w[1..1]);
	w_anode8487w[] = ( (w_anode8487w[2..2] & w_data8339w[2..2]), (w_anode8487w[1..1] & (! w_data8339w[1..1])), (w_anode8487w[0..0] & (! w_data8339w[0..0])), w_anode8439w[1..1]);
	w_anode8497w[] = ( (w_anode8497w[2..2] & w_data8339w[2..2]), (w_anode8497w[1..1] & (! w_data8339w[1..1])), (w_anode8497w[0..0] & w_data8339w[0..0]), w_anode8439w[1..1]);
	w_anode8507w[] = ( (w_anode8507w[2..2] & w_data8339w[2..2]), (w_anode8507w[1..1] & w_data8339w[1..1]), (w_anode8507w[0..0] & (! w_data8339w[0..0])), w_anode8439w[1..1]);
	w_anode8517w[] = ( (w_anode8517w[2..2] & w_data8339w[2..2]), (w_anode8517w[1..1] & w_data8339w[1..1]), (w_anode8517w[0..0] & w_data8339w[0..0]), w_anode8439w[1..1]);
	w_data8339w[2..0] = data_wire[2..0];
END;
--VALID FILE
